{"version":3,"sources":["Joke.js","JokeList.js","App.js","serviceWorker.js","index.js"],"names":["Joke","className","onClick","this","props","upvote","votes","downvote","text","Component","JokeList","state","jokes","length","numJokesToGet","axios","get","headers","Accept","response","push","id","uuidv4","data","joke","setState","delta","st","map","j","src","alt","key","handleVote","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8UAsBeA,G,6KAjBX,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,gBACb,uBAAGA,UAAU,kBAAkBC,QAASC,KAAKC,MAAMC,QACjD,0BAAMJ,UAAU,cAAcE,KAAKC,MAAME,QAE3C,uBAAGL,UAAU,oBAAoBC,QAASC,KAAKC,MAAMG,YAEvD,yBAAKN,UAAU,aAAaE,KAAKC,MAAMI,MACvC,yBAAKP,UAAU,eACb,uBAAGA,UAAU,8C,GAZJQ,c,yBCGbC,G,wDAIJ,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CAAEC,MAAO,IAFL,E,kLAKbA,EAAQ,G,YACLA,EAAMC,OAASV,KAAKC,MAAMU,e,gCACVC,IAAMC,IAAI,8BAA+B,CAC5DC,QAAS,CAAEC,OAAQ,sB,OADjBC,E,OAGJP,EAAMQ,KAAK,CAAEC,GAAIC,cAAUd,KAAMW,EAASI,KAAKC,KAAMlB,MAAO,I,sBAE9DH,KAAKsB,SAAS,CAAEb,MAAOA,I,uIAGdS,EAAIK,GACbvB,KAAKsB,UAAS,SAACE,GAAD,MAAS,CACrBf,MAAOe,EAAGf,MAAMgB,KAAI,SAACC,GAAD,OAClBA,EAAER,KAAOA,EAAT,2BAAmBQ,GAAnB,IAAsBvB,MAAOuB,EAAEvB,MAAQoB,IAAUG,W,+BAK7C,IAAD,OACP,OACE,yBAAK5B,UAAU,YACb,yBAAKA,UAAU,oBACb,wBAAIA,UAAU,kBACZ,qCADF,UAGA,yBACE6B,IAAI,6FACJC,IAAI,UAEN,4BAAQ9B,UAAU,oBAAlB,cAGF,yBAAKA,UAAU,kBACZE,KAAKQ,MAAMC,MAAMgB,KAAI,SAACC,GAAD,OACpB,kBAAC,EAAD,CACEG,IAAKH,EAAER,GACPf,MAAOuB,EAAEvB,MACTE,KAAMqB,EAAErB,KACRH,OAAQ,kBAAM,EAAK4B,WAAWJ,EAAER,GAAI,IACpCd,SAAU,kBAAM,EAAK0B,WAAWJ,EAAER,IAAK,e,GAhD9BZ,cAAjBC,EACGwB,aAAe,CACpBpB,cAAe,IAuDJJ,Q,MCnDAyB,MARf,WACE,OACE,yBAAKlC,UAAU,OACb,kBAAC,EAAD,QCKcmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.00117c30.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Joke.css\";\r\n\r\nclass Joke extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Joke\">\r\n        <div className=\"Joke-buttons\">\r\n          <i className=\"fas fa-arrow-up\" onClick={this.props.upvote}>\r\n            <span className=\"Joke-votes\">{this.props.votes}</span>\r\n          </i>\r\n          <i className=\"fas fa-arrow-down\" onClick={this.props.downvote}></i>\r\n        </div>\r\n        <div className=\"Joke-text\">{this.props.text}</div>\r\n        <div className=\"Joke-smiley\">\r\n          <i className=\"em em-rolling_on_the_floor_laughing\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Joke;\r\n","import React, { Component } from \"react\";\r\nimport Joke from \"./Joke\";\r\nimport axios from \"axios\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport \"./JokeList.css\";\r\n\r\nclass JokeList extends Component {\r\n  static defaultProps = {\r\n    numJokesToGet: 10,\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { jokes: [] };\r\n  }\r\n  async componentDidMount() {\r\n    let jokes = [];\r\n    while (jokes.length < this.props.numJokesToGet) {\r\n      let response = await axios.get(\"https://icanhazdadjoke.com/\", {\r\n        headers: { Accept: \"application/json\" },\r\n      });\r\n      jokes.push({ id: uuidv4(), text: response.data.joke, votes: 0 });\r\n    }\r\n    this.setState({ jokes: jokes });\r\n  }\r\n\r\n  handleVote(id, delta) {\r\n    this.setState((st) => ({\r\n      jokes: st.jokes.map((j) =>\r\n        j.id === id ? { ...j, votes: j.votes + delta } : j\r\n      ),\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"JokeList\">\r\n        <div className=\"JokeList-sidebar\">\r\n          <h1 className=\"JokeList-title\">\r\n            <span>Dad</span> Jokes\r\n          </h1>\r\n          <img\r\n            src=\"https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg\"\r\n            alt=\"smile\"\r\n          />\r\n          <button className=\"JokeList-getmore\">New Jokes</button>\r\n        </div>\r\n\r\n        <div className=\"JokeList-jokes\">\r\n          {this.state.jokes.map((j) => (\r\n            <Joke\r\n              key={j.id}\r\n              votes={j.votes}\r\n              text={j.text}\r\n              upvote={() => this.handleVote(j.id, 1)}\r\n              downvote={() => this.handleVote(j.id, -1)}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default JokeList;\r\n","import React from \"react\";\nimport JokeList from \"./JokeList\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <JokeList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}